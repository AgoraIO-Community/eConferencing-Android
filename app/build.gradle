def extGet(prop, key) {
    if (rootProject.ext.has(prop)) {
        def map = rootProject.ext.get(prop)
        if (map.containsKey(key)) {
            return map.get(key)
        }
    }
    return "latest.release"
}

apply plugin: 'com.android.application'
apply plugin: "androidx.navigation.safeargs"

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    viewBinding {
        enabled = true
    }
    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "io.agora.meeting"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0.0"

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField 'String', 'CODE', '"conf-demo"'
        buildConfigField 'String', 'EXTRA', '"AgoraMeeting"'

        buildConfigField 'String', 'API_BASE_URL', '"https://api.agora.io/scenario/"'
        buildConfigField 'String', 'POLICY_URL', '"https://www.agora.io/privacy-policy"'

        ndk {
            abiFilters 'armeabi-v7a', 'x86'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':base')
    implementation project(':log')
    implementation project(':sdk')
    implementation project(':whiteboard')

    testImplementation "junit:junit:${extGet('dependencies', 'junit:junit')}"
    androidTestImplementation "androidx.test.ext:junit:${extGet('dependencies', 'androidx.test.ext:junit')}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${extGet('dependencies', 'androidx.test.espresso:espresso-core')}"

    implementation "androidx.constraintlayout:constraintlayout:${extGet('dependencies', 'androidx.constraintlayout:constraintlayout')}"
    implementation "androidx.navigation:navigation-fragment:${extGet('dependencies', 'androidx.navigation:navigation-fragment')}"
    implementation "androidx.lifecycle:lifecycle-extensions:${extGet('dependencies', 'androidx.lifecycle:lifecycle-extensions')}"
    implementation "androidx.recyclerview:recyclerview:${extGet('dependencies', 'androidx.recyclerview:recyclerview')}"
    implementation "com.google.android.material:material:${extGet('dependencies', 'com.google.android.material:material')}"
    implementation "com.github.razerdp:BasePopup:${extGet('dependencies', 'com.github.razerdp:BasePopup')}"
    implementation "pub.devrel:easypermissions:${extGet('dependencies', 'pub.devrel:easypermissions')}"
    implementation "q.rorbin:badgeview:${extGet('dependencies', 'q.rorbin:badgeview')}"
    implementation "com.github.QuadFlask:colorpicker:${extGet('dependencies', 'com.github.QuadFlask:colorpicker')}"
    implementation "com.jeremyliao:live-event-bus-x:${extGet('dependencies', 'com.jeremyliao:live-event-bus-x')}"
}
